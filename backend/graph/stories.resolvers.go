package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/wilbertcoandssss/training-preweb/graph/model"
)

// InsertStories is the resolver for the insertStories field.
func (r *mutationResolver) InsertStories(ctx context.Context, newStories model.NewStories) (*model.Stories, error) {
	if newStories.Type == "Text" {
		stories := &model.Stories{
			ID:          uuid.NewString(),
			UserID:      newStories.UserID,
			Type:        newStories.Type,
			BgColor:     *newStories.BgColor,
			FontFamily:  *newStories.FontFamily,
			FontColor:   *newStories.FontColor,
			TextContent: *newStories.TextContent,
			Date:        newStories.Date,
			ZoomLevel:   0,
		}
		return stories, r.DB.Create(&stories).Error
	} else {
		stories := &model.Stories{
			ID:          uuid.NewString(),
			UserID:      newStories.UserID,
			Type:        newStories.Type,
			BgColor:     *newStories.BgColor,
			FontFamily:  "",
			FontColor:   "",
			TextContent: "",
			Date:        newStories.Date,
			ZoomLevel:   *newStories.ZoomLevel,
		}

		return stories, r.DB.Create(&stories).Error
	}
}

// GetAllStories is the resolver for the getAllStories field.
func (r *queryResolver) GetAllStories(ctx context.Context) ([]*model.FetchStories, error) {
	var stories []*model.Stories

	if err := r.DB.Find(&stories).Error; err != nil {
		return nil, err
	}

	var fetchStories []*model.FetchStories

	for _, story := range stories {
		fetchStory := &model.FetchStories{
			ID:          story.ID,
			UserID:      story.UserID,
			Type:        story.Type,
			BgColor:     story.BgColor,
			FontFamily:  story.FontFamily,
			FontColor:   story.FontColor,
			TextContent: story.TextContent,
			MediaURL:    nil,
			Date:        story.Date,
			ZoomLevel:   story.ZoomLevel,
		}

		var user model.User

		if err := r.DB.Where("id = ?", story.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		fetchStory.AuthorData = &user

		// Media
		var mediaURLs []string
		var mediaList []*model.Media
		if err := r.DB.Where("post_id = ?", story.ID).Find(&mediaList).Error; err != nil {
			return nil, err
		}
		for _, media := range mediaList {
			mediaURLs = append(mediaURLs, media.MediaURL)
		}

		fetchStory.MediaURL = mediaURLs

		fetchStories = append(fetchStories, fetchStory)
	}

	return fetchStories, nil
}

// GetStories is the resolver for the getStories field.
func (r *queryResolver) GetStories(ctx context.Context, storiesID string) (*model.FetchStories, error) {
	panic(fmt.Errorf("not implemented: GetStories - getStories"))
}

// GetStoriesByUserID is the resolver for the getStoriesByUserId field.
func (r *queryResolver) GetStoriesByUserID(ctx context.Context, userID string) ([]*model.FetchStories, error) {
	var stories []*model.Stories

	if err := r.DB.Where("user_id = ?", userID).Find(&stories).Error; err != nil {
		return nil, err
	}

	var fetchStories []*model.FetchStories

	for _, story := range stories {
		fetchStory := &model.FetchStories{
			ID:          story.ID,
			UserID:      story.UserID,
			Type:        story.Type,
			BgColor:     story.BgColor,
			FontFamily:  story.FontFamily,
			FontColor:   story.FontColor,
			TextContent: story.TextContent,
			MediaURL:    nil,
			Date:        story.Date,
			ZoomLevel:   story.ZoomLevel,
		}

		var user model.User

		if err := r.DB.Where("id = ?", story.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		fetchStory.AuthorData = &user

		// Media
		var mediaURLs []string
		var mediaList []*model.Media
		if err := r.DB.Where("post_id = ?", story.ID).Find(&mediaList).Error; err != nil {
			return nil, err
		}
		for _, media := range mediaList {
			mediaURLs = append(mediaURLs, media.MediaURL)
		}

		fetchStory.MediaURL = mediaURLs

		fetchStories = append(fetchStories, fetchStory)
	}

	return fetchStories, nil
}

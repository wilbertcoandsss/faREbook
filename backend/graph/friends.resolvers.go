package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/wilbertcoandssss/training-preweb/graph/model"
)

// RequestFriends is the resolver for the requestFriends field.
func (r *mutationResolver) RequestFriends(ctx context.Context, userID string, friendsID string) (bool, error) {
	newReq := &model.Friends{
		UserID:    userID,
		FriendsID: friendsID,
		Status:    "Pending",
	}

	return true, r.DB.Create(&newReq).Error
}

// DeclineReq is the resolver for the declineReq field.
func (r *mutationResolver) DeclineReq(ctx context.Context, userID string, friendsID string) (bool, error) {
	// Attempt to delete the friend request data based on user_id and friends_id
	if err := r.DB.Where("user_id = ? AND friends_id = ?", userID, friendsID).Delete(&model.Friends{}).Error; err != nil {
		return false, err
	}

	// If no error occurred, return true to indicate successful deletion
	return true, nil
}

// AcceptReq is the resolver for the acceptReq field.
func (r *mutationResolver) AcceptReq(ctx context.Context, userID string, friendsID string) (bool, error) {
	// Attempt to find the friend request data based on user_id and friends_id
	updateQuery := `
	UPDATE friends
	SET status = 'Accepted'
	WHERE user_id = ? AND friends_id = ?
`
	if err := r.DB.Exec(updateQuery, userID, friendsID).Error; err != nil {
		return false, err
	}

	// Insert a new record for the accepted friendship
	insertQuery := `
	INSERT INTO friends (user_id, friends_id, status)
	VALUES (?, ?, 'Accepted')
`
	if err := r.DB.Exec(insertQuery, friendsID, userID).Error; err != nil {
		return false, err
	}

	// If no error occurred, return true to indicate successful acceptance
	return true, nil
}

// GetAllFriends is the resolver for the getAllFriends field.
func (r *queryResolver) GetAllFriends(ctx context.Context, userID string) ([]*model.FetchFriendsReq, error) {
	var friends []*model.Friends

	if err := r.DB.Where("user_id = ? AND status = ?", userID, "Accepted").Find(&friends).Error; err != nil {
		return nil, err
	}

	var fetchFriendsReq []*model.FetchFriendsReq

	for _, friendsReq := range friends {
		fetchFriendReq := &model.FetchFriendsReq{
			UserID:      friendsReq.UserID,
			FriendsID:   friendsReq.FriendsID,
			Status:      friendsReq.Status,
			UserData:    nil,
			FriendsData: nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", friendsReq.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		var friend model.User

		if err := r.DB.Where("id = ?", friendsReq.FriendsID).First(&friend).Error; err != nil {
			return nil, err
		}

		fetchFriendReq.UserData = &user
		fetchFriendReq.FriendsData = &friend

		fetchFriendsReq = append(fetchFriendsReq, fetchFriendReq)
	}

	return fetchFriendsReq, nil
}

// GetFriendRequest is the resolver for the getFriendRequest field.
func (r *queryResolver) GetFriendRequest(ctx context.Context, userID string) ([]*model.FetchFriendsReq, error) {
	var friends []*model.Friends
	fmt.Print(userID)
	if err := r.DB.Where("user_id = ? AND status = ?", userID, "Pending").Find(&friends).Error; err != nil {
		return nil, err
	}

	var fetchFriendsReq []*model.FetchFriendsReq

	for _, friendsReq := range friends {
		fetchFriendReq := &model.FetchFriendsReq{
			UserID:      friendsReq.UserID,
			FriendsID:   friendsReq.FriendsID,
			Status:      friendsReq.Status,
			UserData:    nil,
			FriendsData: nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", friendsReq.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		var friend model.User

		if err := r.DB.Where("id = ?", friendsReq.FriendsID).First(&friend).Error; err != nil {
			return nil, err
		}

		fetchFriendReq.UserData = &user
		fetchFriendReq.FriendsData = &friend

		fetchFriendsReq = append(fetchFriendsReq, fetchFriendReq)
	}

	return fetchFriendsReq, nil
}

// GetSuggestedFriends is the resolver for the getSuggestedFriends field.
func (r *queryResolver) GetSuggestedFriends(ctx context.Context, userID string) ([]*model.User, error) {
	// Get the user's friends
	var userFriends []*model.Friends
	if err := r.DB.Where("user_id = ?", userID).Find(&userFriends).Error; err != nil {
		return nil, err
	}

	// Get the user's friend IDs
	var friendIDs []string
	for _, friend := range userFriends {
		friendIDs = append(friendIDs, friend.FriendsID)
	}

	// Get the friends of the user's friends
	var friendsOfFriends []*model.Friends
	if err := r.DB.Where("user_id IN ?", friendIDs).Find(&friendsOfFriends).Error; err != nil {
		return nil, err
	}

	// Filter out friends of the user and friends of friends
	suggestedFriendIDs := make(map[string]bool)
	for _, fof := range friendsOfFriends {
		if fof.FriendsID != userID && !contains(friendIDs, fof.FriendsID) {
			suggestedFriendIDs[fof.FriendsID] = true
		}
	}

	// Get the details of suggested friends
	var suggestedFriends []*model.User
	if err := r.DB.Where("id IN ?", keys(suggestedFriendIDs)).Find(&suggestedFriends).Error; err != nil {
		return nil, err
	}

	return suggestedFriends, nil
}

// GetMutualFriends is the resolver for the getMutualFriends field.
func (r *queryResolver) GetMutualFriends(ctx context.Context, userID1 string, userID2 string) (int, error) {
	var friends1 []*model.Friends

	if err := r.DB.Where("user_id = ? AND status = ?", userID1, "Accepted").Find(&friends1).Error; err != nil {
		return 0, err
	}

	var friends2 []*model.Friends

	if err := r.DB.Where("user_id = ? AND status = ?", userID2, "Accepted").Find(&friends2).Error; err != nil {
		return 0, err
	}

	var fetchFriendsReq []*model.FetchFriendsReq

	for _, friendsReq := range friends1 {
		fetchFriendReq := &model.FetchFriendsReq{
			UserID:      friendsReq.UserID,
			FriendsID:   friendsReq.FriendsID,
			Status:      friendsReq.Status,
			UserData:    nil,
			FriendsData: nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", friendsReq.UserID).First(&user).Error; err != nil {
			return 0, err
		}

		var friend model.User

		if err := r.DB.Where("id = ?", friendsReq.FriendsID).First(&friend).Error; err != nil {
			return 0, err
		}

		fetchFriendReq.UserData = &user
		fetchFriendReq.FriendsData = &friend

		fetchFriendsReq = append(fetchFriendsReq, fetchFriendReq)
	}

	var fetchFriendsReq2 []*model.FetchFriendsReq

	for _, friendsReq := range friends2 {
		fetchFriendReq2 := &model.FetchFriendsReq{
			UserID:      friendsReq.UserID,
			FriendsID:   friendsReq.FriendsID,
			Status:      friendsReq.Status,
			UserData:    nil,
			FriendsData: nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", friendsReq.UserID).First(&user).Error; err != nil {
			return 0, err
		}

		var friend model.User

		if err := r.DB.Where("id = ?", friendsReq.FriendsID).First(&friend).Error; err != nil {
			return 0, err
		}

		fetchFriendReq2.UserData = &user
		fetchFriendReq2.FriendsData = &friend

		fetchFriendsReq2 = append(fetchFriendsReq2, fetchFriendReq2)
	}

	// Print data from fetchFriendsReq using fmt.Println
	fmt.Println("Data from fetchFriendsReq:")
	for _, friendReq := range fetchFriendsReq {
		fmt.Printf("UserID: %s, FriendsID: %s, Status: %s\n",
			friendReq.UserID, friendReq.FriendsID, friendReq.Status)
		// You can also print additional data like user and friend details
	}

	// Print data from fetchFriendsReq2 using fmt.Println
	fmt.Println("Data from fetchFriendsReq2:")
	for _, friendReq := range fetchFriendsReq2 {
		fmt.Printf("UserID: %s, FriendsID: %s, Status: %s\n",
			friendReq.UserID, friendReq.FriendsID, friendReq.Status)
		// You can also print additional data like user and friend details
	}
	// Calculate and print the count of mutual friends
	mutualFriendsCount := 0
	for _, friendReq1 := range fetchFriendsReq {
		for _, friendReq2 := range fetchFriendsReq2 {
			if friendReq1.FriendsID == friendReq2.FriendsID {
				mutualFriendsCount++
			}
		}
	}

	return mutualFriendsCount, nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
func keys(m map[string]bool) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	return keys
}
func containsFriend(friends []*model.User, friend *model.User) bool {
	for _, f := range friends {
		if f.ID == friend.ID {
			return true
		}
	}
	return false
}

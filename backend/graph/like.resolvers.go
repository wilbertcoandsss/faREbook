package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/wilbertcoandssss/training-preweb/graph/model"
)

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, postID string, userID string) (bool, error) {
	like := &model.Like{
		PostID: postID,
		UserID: userID,
		Type:   "Post",
	}
	return true, r.DB.Create(&like).Error
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, postID string, userID string) (bool, error) {
	err := r.DB.Where("post_id = ? AND user_id = ?", postID, userID).Delete(&model.Like{}).Error
	if err != nil {
		return false, err
	}
	return true, nil
}

// LikeComment is the resolver for the likeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, commentID string, userID string) (bool, error) {
	like := &model.Like{
		PostID: commentID,
		UserID: userID,
		Type:   "Comment",
	}
	return true, r.DB.Create(&like).Error
}

// UnlikeComment is the resolver for the unlikeComment field.
func (r *mutationResolver) UnlikeComment(ctx context.Context, commentID string, userID string) (bool, error) {
	err := r.DB.Where("post_id = ? AND user_id = ?", commentID, userID).Delete(&model.Like{}).Error
	if err != nil {
		return false, err
	}
	return true, nil
}

// LikeReels is the resolver for the likeReels field.
func (r *mutationResolver) LikeReels(ctx context.Context, reelsID string, userID string) (bool, error) {
	like := &model.Like{
		PostID: reelsID,
		UserID: userID,
		Type:   "Reels",
	}
	return true, r.DB.Create(&like).Error
}

// UnlikeReels is the resolver for the unlikeReels field.
func (r *mutationResolver) UnlikeReels(ctx context.Context, reelsID string, userID string) (bool, error) {
	err := r.DB.Where("post_id = ? AND user_id = ?", reelsID, userID).Delete(&model.Like{}).Error
	if err != nil {
		return false, err
	}
	return true, nil
}

// GetLikeStatus is the resolver for the getLikeStatus field.
func (r *queryResolver) GetLikeStatus(ctx context.Context, postID string, userID string) (bool, error) {
	var like model.Like

	// Query the database to check for the existence of the like status
	err := r.DB.Where("post_id = ? AND user_id = ?", postID, userID).First(&like).Error
	if err != nil {
		return false, err
	}

	// Like status exists, return true
	return true, nil
}

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/google/uuid"
	"github.com/wilbertcoandssss/training-preweb/graph/model"
)

// AddReplies is the resolver for the addReplies field.
func (r *mutationResolver) AddReplies(ctx context.Context, commentID string, userID string, reply string, date string) (*model.Replies, error) {
	newReplies := &model.Replies{
		ID:        uuid.NewString(),
		CommentID: commentID,
		UserID:    userID,
		Reply:     reply,
		Date:      date,
	}

	return newReplies, r.DB.Save(&newReplies).Error
}

// GetAllReplies is the resolver for the getAllReplies field.
func (r *queryResolver) GetAllReplies(ctx context.Context, commentID string) ([]*model.FetchReplies, error) {
	var replies []*model.Replies

	if err := r.DB.Where("comment_id = ?", commentID).Find(&replies).Error; err != nil {
		return nil, err
	}

	var fetchReplies []*model.FetchReplies

	for _, replie := range replies {
		fetchReply := &model.FetchReplies{
			ID:           replie.ID,
			CommentID:    replie.CommentID,
			UserID:       replie.UserID,
			Reply:        replie.Reply,
			Date:         replie.Date,
			LikedCount:   0,
			UserData:     nil,
			AncestorData: nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", replie.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		var ancestorUser model.User
		var com model.Comment

		if err := r.DB.Where("id = ?", commentID).Find(&com).Error; err != nil {
			return nil, err
		}

		if err := r.DB.Where("id = ?", com.UserID).First(&ancestorUser).Error; err != nil {
			return nil, err
		}

		// Count likes for the current post
		var likeCount int64
		if err := r.DB.Model(&model.Like{}).Where("post_id = ?", replie.ID).Count(&likeCount).Error; err != nil {
			return nil, err
		}

		fetchReply.LikedCount = int(likeCount)

		fetchReply.AncestorData = &ancestorUser

		fetchReply.UserData = &user

		fetchReplies = append(fetchReplies, fetchReply)
	}
	return fetchReplies, nil
}

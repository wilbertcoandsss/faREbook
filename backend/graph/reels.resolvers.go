package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/google/uuid"
	"github.com/wilbertcoandssss/training-preweb/graph/model"
)

// InsertReel is the resolver for the insertReel field.
func (r *mutationResolver) InsertReel(ctx context.Context, inputReel model.NewReels) (*model.Reels, error) {
	newReels := &model.Reels{
		ID:        uuid.NewString(),
		UserID:    inputReel.UserID,
		Caption:   inputReel.Caption,
		ReelsDate: inputReel.ReelsDate,
		FontColor: inputReel.FontColor,
	}

	return newReels, r.DB.Create(&newReels).Error
}

// GetAllReels is the resolver for the getAllReels field.
func (r *queryResolver) GetAllReels(ctx context.Context) ([]*model.FetchReels, error) {
	var reels []*model.Reels

	if err := r.DB.Find(&reels).Error; err != nil {
		return nil, err
	}

	var fetchReels []*model.FetchReels

	for _, reel := range reels {
		fetchReel := &model.FetchReels{
			ID:           reel.ID,
			UserID:       reel.UserID,
			Caption:      reel.Caption,
			ReelsDate:    reel.ReelsDate,
			FontColor:    reel.FontColor,
			LikedCount:   0,
			CommentCount: 0,
			MediaURL:     nil,
			AuthorData:   nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", reel.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		fetchReel.AuthorData = &user

		// Liked Count
		var likeCount int64
		if err := r.DB.Model(&model.Like{}).Where("post_id = ?", reel.ID).Count(&likeCount).Error; err != nil {
			return nil, err
		}

		// Comment
		var commentCount int64
		if err := r.DB.Model(&model.Comment{}).Where("post_id = ?", reel.ID).Count(&commentCount).Error; err != nil {
			return nil, err
		}

		fetchReel.LikedCount = int(likeCount)
		fetchReel.CommentCount = int(commentCount)

		// Media
		var mediaURLs []string
		var mediaList []*model.Media
		if err := r.DB.Where("post_id = ?", reel.ID).Find(&mediaList).Error; err != nil {
			return nil, err
		}
		for _, media := range mediaList {
			mediaURLs = append(mediaURLs, media.MediaURL)
		}

		fetchReel.MediaURL = mediaURLs

		fetchReels = append(fetchReels, fetchReel)
	}

	return fetchReels, nil
}

// GetReelsByUserID is the resolver for the getReelsByUserId field.
func (r *queryResolver) GetReelsByUserID(ctx context.Context, userID string) ([]*model.FetchReels, error) {
	var reels []*model.Reels

	if err := r.DB.Where("user_id = ?", userID).Find(&reels).Error; err != nil {
		return nil, err
	}

	var fetchReels []*model.FetchReels

	for _, reel := range reels {
		fetchReel := &model.FetchReels{
			ID:           reel.ID,
			UserID:       reel.UserID,
			Caption:      reel.Caption,
			ReelsDate:    reel.ReelsDate,
			FontColor:    reel.FontColor,
			LikedCount:   0,
			CommentCount: 0,
			MediaURL:     nil,
			AuthorData:   nil,
		}

		var user model.User

		if err := r.DB.Where("id = ?", reel.UserID).First(&user).Error; err != nil {
			return nil, err
		}

		fetchReel.AuthorData = &user

		// Liked Count
		var likeCount int64
		if err := r.DB.Model(&model.Like{}).Where("post_id = ?", reel.ID).Count(&likeCount).Error; err != nil {
			return nil, err
		}

		// Comment
		var commentCount int64
		if err := r.DB.Model(&model.Comment{}).Where("post_id = ?", reel.ID).Count(&commentCount).Error; err != nil {
			return nil, err
		}

		fetchReel.LikedCount = int(likeCount)
		fetchReel.CommentCount = int(commentCount)

		// Media
		var mediaURLs []string
		var mediaList []*model.Media
		if err := r.DB.Where("post_id = ?", reel.ID).Find(&mediaList).Error; err != nil {
			return nil, err
		}
		for _, media := range mediaList {
			mediaURLs = append(mediaURLs, media.MediaURL)
		}

		fetchReel.MediaURL = mediaURLs

		fetchReels = append(fetchReels, fetchReel)
	}

	return fetchReels, nil
}

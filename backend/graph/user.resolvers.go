package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/wilbertcoandssss/training-preweb/graph/model"
	"github.com/wilbertcoandssss/training-preweb/helper"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	password, err := model.HashPassword(inputUser.Password)

	if err != nil {
		return nil, err
	}

	var profilePic string

	if inputUser.Gender == "male" {
		profilePic = "https://res.cloudinary.com/dw7bewmoo/image/upload/v1692548535/img_male_avatar_vyft7e.png"
	} else {
		profilePic = "https://res.cloudinary.com/dw7bewmoo/image/upload/v1692548532/img_female_avatar2_y2d483.png"
	}

	user := &model.User{
		ID:         uuid.NewString(),
		Firstname:  inputUser.Firstname,
		Surname:    inputUser.Surname,
		Email:      inputUser.Email,
		Password:   password,
		Dob:        inputUser.Dob,
		Verifcode:  inputUser.Verifcode,
		Isverified: false,
		Gender:     inputUser.Gender,
		Profilepic: profilePic,
	}

	return user, r.DB.Save(&user).Error
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.Firstname = inputUser.Firstname
	user.Surname = inputUser.Surname
	user.Email = inputUser.Email
	user.Password = inputUser.Password
	user.Dob = inputUser.Dob
	user.Verifcode = inputUser.Verifcode
	user.Profilepic = inputUser.Profilepic

	return user, r.DB.Save(&user).Error
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return user, r.DB.Delete(&user).Error
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input model.LoginInput) (*model.AuthUser, error) {
	var user model.User
	err := r.DB.First(&user, "email = ?", input.Email).Error
	if err != nil {
		return nil, err
	}

	if model.CheckPasswordHash(input.Password, user.Password) {

		token, err := helper.GenerateToken(user.ID)

		fmt.Println("Coba", token)

		auth := model.AuthUser{
			Email: user.Email,
			ID:    user.ID,
			Token: token,
		}

		if err != nil {
			return nil, err
		}

		return &auth, nil
	}

	return nil, nil
}

// SetVerified is the resolver for the setVerified field.
func (r *mutationResolver) SetVerified(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.Isverified = true

	return user, r.DB.Save(&user).Error
}

// CheckPassword is the resolver for the checkPassword field.
func (r *mutationResolver) CheckPassword(ctx context.Context, pw string, id string) (bool, error) {
	var user *model.User

	err := r.DB.First(&user, "id = ?", id).Error

	if err != nil {
		return false, err
	}

	if model.CheckPasswordHash(pw, user.Password) {
		fmt.Println("PWNYA SAMA AGBOLEH")
		return false, err
	}

	return true, err
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, newPw string, id string) (bool, error) {
	var user *model.User

	err := r.DB.First(&user, "id = ?", id).Error

	if err != nil {
		return false, nil
	}

	newHashPw, err := model.HashPassword(newPw)

	if err != nil {
		return false, nil
	}

	user.Password = newHashPw

	return true, r.DB.Save(&user).Error
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return user, nil
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	var user *model.User

	return user, r.DB.First(&user, "email = ?", email).Error
}

// ValidateJwt is the resolver for the validateJWT field.
func (r *queryResolver) ValidateJwt(ctx context.Context, token string) (*model.User, error) {
	var user *model.User

	jwtToken, err := helper.ValidateToken(token)

	if err != nil {
		return nil, nil
	}

	if err := r.DB.First(&user, "id = ?", jwtToken).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// CheckVerified is the resolver for the checkVerified field.
func (r *queryResolver) CheckVerified(ctx context.Context, email string) (bool, error) {
	var u *model.User

	if err := r.DB.Where("email = ?", email).First(&u).Error; err != nil {
		return false, err
	}

	return u.Isverified, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
